<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.gagooda_project.mapper.ProductMapper">
    <resultMap id="productMap" type="ProductDto">
        <id column="product_code" property="productCode"/>
        <result column="delivery_pc" property="deliveryPc"/>
        <result column="supply_pc" property="supplyPc"/>
        <result column="sales_pc" property="salesPc"/>
        <result column="img_code" property="imgCode"/>
        <result column="info_img_code" property="infoImgCode"/>
        <result column="p_det" property="pDet"/>
        <result column="reg_date" property="regDate"/>
        <result column="reg_id" property="regId"/>
        <result column="mod_date" property="modDate"/>
        <result column="mod_id" property="modId"/>
        <collection property="imageList"
                    select="com.example.gagooda_project.mapper.ImageMapper.listByImgCode"
                    column="img_code"
                    fetchType="lazy"/>
        <collection property="infoImageList"
                    select="com.example.gagooda_project.mapper.ImageMapper.listByImgCode"
                    column="info_img_code"
                    fetchType="lazy"/>
        <collection property="optionProductList"
                    select="com.example.gagooda_project.mapper.OptionProductMapper.listByProductCode"
                    column="product_code"
                    fetchType="lazy"/>
    </resultMap>
    <insert id="insertOne" parameterType="ProductDto">
        INSERT INTO product
        (product_code, pname, place, delivery_pc, supply_pc, sales_pc, img_code, info_img_code, reg_id, mod_id)
        VALUES (#{productCode}, #{pname}, #{place}, #{deliveryPc}, #{supplyPc}, #{salesPc}, #{imgCode}, #{infoImgCode},
                #{regId}, #{modId})
    </insert>
    <update id="updateOne" parameterType="ProductDto">
        UPDATE product
        SET pname=#{pname},
            place=#{place},
            delivery_pc=#{deliveryPc},
            supply_pc=#{supplyPc},
            sales_pc=#{salesPc},
            rot=#{rot},
            margin=#{margin},
            p_det=#{pDet},
            mod_date=#{modDate},
            mod_id=#{modId}
        WHERE product_code = #{productCode}
    </update>
    <delete id="deleteById">
        DELETE
        FROM product
        WHERE product_code = #{productCode}
    </delete>
    <select id="findById" resultMap="productMap">
        SELECT *
        FROM product
        WHERE product_code = #{productCode}
    </select>
    <select id="listAll" resultMap="productMap">
        SELECT *
        FROM product
    </select>
    <select id="count" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM product
    </select>
    <select id="pageAll" resultMap="productMap">
        SELECT *
        FROM product
        ORDER BY ${paging.orderField} ${paging.direct}
        LIMIT #{paging.startRow}, #{paging.rows}
    </select>
    <select id="countForPaging" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM
        (SELECT product.*
        FROM product
        LEFT JOIN category_conn cc
        ON product.product_code = cc.product_code
        <where>
            <if test="map.get('categoryId')!=null and !map.get('categoryId').isEmpty()">
                AND cc.category_id = ${map.get("categoryId")}
            </if>
            <if test="map.get('catDetList')!=null and !map.get('catDetList').isEmpty()">
                AND product.p_det in
                <foreach item="det" index="index" collection="map.get('catDetList')"
                         open="(" separator="," close=")">#{det}
                </foreach>
            </if>
            <if test="map.get('searchWord')!=null and !map.get('searchWord').isBlank()">
                AND (product.product_code LIKE ${map.get('searchWord')}
                OR product.pname LIKE ${map.get('searchWord')})
            </if>
        </where>
        GROUP BY product.product_code) as db
    </select>
    <select id="pageForPaging" resultMap="productMap">
        SELECT product.*
        FROM product
        LEFT JOIN category_conn cc
        ON product.product_code = cc.product_code
        <where>
            <if test="map.get('categoryIdList')!=null and !map.get('categoryIdList').isEmpty()">
                AND cc.category_id in
                <foreach item="det" index="index" collection="map.get('categoryIdList')"
                         open="(" separator="," close=")">#{det}
                </foreach>
            </if>
            <if test="map.get('catDetList')!=null and !map.get('catDetList').isEmpty()">
                AND product.p_det in
                <foreach item="det" index="index" collection="map.get('catDetList')"
                         open="(" separator="," close=")">#{det}
                </foreach>
            </if>
            <if test="map.get('searchWord')!=null and !map.get('searchWord').isBlank()">
                AND (product.product_code LIKE ${map.get('searchWord')}
                OR product.pname LIKE ${map.get('searchWord')})
            </if>
        </where>
        GROUP BY product.product_code
        ORDER BY ${paging.orderField} ${paging.direct}
        LIMIT #{paging.startRow}, #{paging.rows}
    </select>

    <select id="mainListBySales" parameterType="String" resultMap="productMap">
        SELECT *
        FROM product
        WHERE place = #{place}
        ORDER BY product_code = #{productCode} ASC
        LIMIT 8
    </select>
</mapper>
<!--
SELECT p.product_code,
        COUNT(r.product_code) review_cnt,
        AVG(r.rate)
FROM (SELECT product.*
        FROM product
        LEFT JOIN category_conn cc
        ON product.product_code = cc.product_code
        GROUP BY product.product_code) p
    LEFT JOIN review r
    ON p.product_code = r.product_code
    GROUP BY p.product_code
    LIMIT 10
-->